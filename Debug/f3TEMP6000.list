
f3TEMP6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e8  080052e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080052e8  080052e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e8  080052e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001c8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8fe  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca7  00000000  00000000  0002c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d546  00000000  00000000  0002f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3f9  00000000  00000000  0004cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4266  00000000  00000000  0005a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e40d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a60  00000000  00000000  0010e460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800524c 	.word	0x0800524c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800524c 	.word	0x0800524c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fc04 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f87e 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f99c 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f8:	f000 f974 	bl	80008e4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fc:	f000 f8d2 	bl	80007a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000600:	f000 f940 	bl	8000884 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	     HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	4904      	ldr	r1, [pc, #16]	; (8000618 <main+0x30>)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0x34>)
 800060a:	f000 fe73 	bl	80012f4 <HAL_ADC_Start_DMA>
	  	     HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fc57 	bl	8000ec4 <HAL_Delay>
	  	     HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
 8000616:	e7f5      	b.n	8000604 <main+0x1c>
 8000618:	200001ec 	.word	0x200001ec
 800061c:	20000090 	.word	0x20000090

08000620 <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	 volts = AD_RES * AREF / 1024.0;    // Convert reading to voltage
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <HAL_ADC_ConvCpltCallback+0x9c>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	ee07 3a90 	vmov	s15, r3
 8000630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800063e:	eddf 6a21 	vldr	s13, [pc, #132]	; 80006c4 <HAL_ADC_ConvCpltCallback+0xa4>
 8000642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000648:	edc3 7a00 	vstr	s15, [r3]
	 amps = volts / 10000.0;             // Convert to amps across 10K resistor
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800064e:	ed93 7a00 	vldr	s14, [r3]
 8000652:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80006cc <HAL_ADC_ConvCpltCallback+0xac>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	 microamps = amps * 1000000.0;             // Convert amps to microamps
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000662:	edd3 7a00 	vldr	s15, [r3]
 8000666:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80006d4 <HAL_ADC_ConvCpltCallback+0xb4>
 800066a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000670:	edc3 7a00 	vstr	s15, [r3]
	 lux = microamps * 2.0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000676:	edd3 7a00 	vldr	s15, [r3]
 800067a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000680:	edc3 7a00 	vstr	s15, [r3]
	 size_len = sprintf (str, "temt6000 Value : %u\n", lux);
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff55 	bl	8000538 <__aeabi_f2d>
 800068e:	4602      	mov	r2, r0
 8000690:	460b      	mov	r3, r1
 8000692:	4913      	ldr	r1, [pc, #76]	; (80006e0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000696:	f004 f96b 	bl	8004970 <siprintf>
 800069a:	4603      	mov	r3, r0
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <HAL_ADC_ConvCpltCallback+0xc8>)
 800069e:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)str, size_len, HAL_MAX_DELAY);
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_ADC_ConvCpltCallback+0xc8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <HAL_ADC_ConvCpltCallback+0xc4>)
 80006ac:	480f      	ldr	r0, [pc, #60]	; (80006ec <HAL_ADC_ConvCpltCallback+0xcc>)
 80006ae:	f003 fd13 	bl	80040d8 <HAL_UART_Transmit>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200001ec 	.word	0x200001ec
 80006c0:	20000000 	.word	0x20000000
 80006c4:	44800000 	.word	0x44800000
 80006c8:	20000214 	.word	0x20000214
 80006cc:	461c4000 	.word	0x461c4000
 80006d0:	20000218 	.word	0x20000218
 80006d4:	49742400 	.word	0x49742400
 80006d8:	2000021c 	.word	0x2000021c
 80006dc:	20000220 	.word	0x20000220
 80006e0:	08005264 	.word	0x08005264
 80006e4:	200001f0 	.word	0x200001f0
 80006e8:	20000210 	.word	0x20000210
 80006ec:	20000124 	.word	0x20000124

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09e      	sub	sp, #120	; 0x78
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f92e 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	223c      	movs	r2, #60	; 0x3c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 f920 	bl	8004960 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000734:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000738:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f858 	bl	80027f4 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800074a:	f000 f9a5 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000764:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f880 	bl	8003870 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000776:	f000 f98f 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800077a:	2381      	movs	r3, #129	; 0x81
 800077c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4618      	mov	r0, r3
 800078c:	f003 faa6 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000796:	f000 f97f 	bl	8000a98 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3778      	adds	r7, #120	; 0x78
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0xdc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000802:	2201      	movs	r2, #1
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000810:	2204      	movs	r2, #4
 8000812:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0xdc>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000822:	f000 fb87 	bl	8000f34 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f934 	bl	8000a98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_ADC1_Init+0xdc>)
 800083c:	f001 f962 	bl	8001b04 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000846:	f000 f927 	bl	8000a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800084a:	2302      	movs	r3, #2
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2301      	movs	r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_ADC1_Init+0xdc>)
 8000868:	f000 fe60 	bl	800152c <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000872:	f000 f911 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000090 	.word	0x20000090

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	f003 fbb8 	bl	800403c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8e1 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000124 	.word	0x20000124
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_DMA_Init+0x48>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_DMA_Init+0x48>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_DMA_Init+0x48>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f001 fbf9 	bl	80020fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f001 fc12 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200f      	movs	r0, #15
 8000918:	f001 fbf1 	bl	80020fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800091c:	200f      	movs	r0, #15
 800091e:	f001 fc0a 	bl	8002136 <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x15c>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b4e      	ldr	r3, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x15c>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a44      	ldr	r2, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x15c>)
 800097c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x15c>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x15c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <MX_GPIO_Init+0x15c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <MX_GPIO_Init+0x15c>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x15c>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009be:	2200      	movs	r2, #0
 80009c0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80009c4:	4832      	ldr	r0, [pc, #200]	; (8000a90 <MX_GPIO_Init+0x160>)
 80009c6:	f001 fefd 	bl	80027c4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80009ca:	2337      	movs	r3, #55	; 0x37
 80009cc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	482c      	ldr	r0, [pc, #176]	; (8000a90 <MX_GPIO_Init+0x160>)
 80009e0:	f001 fd76 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009e4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80009e8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	; (8000a90 <MX_GPIO_Init+0x160>)
 80009fe:	f001 fd67 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f001 fd5a 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a1c:	23e0      	movs	r3, #224	; 0xe0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f001 fd49 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a50:	230e      	movs	r3, #14
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 fd37 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a62:	23c0      	movs	r3, #192	; 0xc0
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a66:	2312      	movs	r3, #18
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a72:	2304      	movs	r3, #4
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_GPIO_Init+0x164>)
 8000a7e:	f001 fd27 	bl	80024d0 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48001000 	.word	0x48001000
 8000a94:	48000400 	.word	0x48000400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ada:	2007      	movs	r0, #7
 8000adc:	f001 fb04 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b0c:	d14c      	bne.n	8000ba8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6153      	str	r3, [r2, #20]
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_ADC_MspInit+0xc4>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f001 fcbc 	bl	80024d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_ADC_MspInit+0xcc>)
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000b8e:	f001 faec 	bl	800216a <HAL_DMA_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000b98:	f7ff ff7e 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_ADC_MspInit+0xc8>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	40020008 	.word	0x40020008

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <HAL_UART_MspInit+0xc8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d14d      	bne.n	8000c7a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c00:	6153      	str	r3, [r2, #20]
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_UART_MspInit+0xcc>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c0e:	2330      	movs	r3, #48	; 0x30
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xd0>)
 8000c2a:	f001 fc51 	bl	80024d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0xd8>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c60:	f001 fa83 	bl	800216a <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000c6a:	f7ff ff15 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c72:	671a      	str	r2, [r3, #112]	; 0x70
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_UART_MspInit+0xd4>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	200001a8 	.word	0x200001a8
 8000c94:	40020058 	.word	0x40020058

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f8ce 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <DMA1_Channel1_IRQHandler+0x10>)
 8000cf2:	f001 fae0 	bl	80022b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000e0 	.word	0x200000e0

08000d00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DMA1_Channel5_IRQHandler+0x10>)
 8000d06:	f001 fad6 	bl	80022b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001a8 	.word	0x200001a8

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f003 fde2 	bl	800490c <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000a000 	.word	0x2000a000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	20000240 	.word	0x20000240

08000d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dce:	f7ff ffd7 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f003 fda1 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd6:	f7ff fc07 	bl	80005e8 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ddc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de8:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 8000dec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df0:	2000023c 	.word	0x2000023c

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f001 f96d 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe46 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f985 	bl	8002152 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f001 f94d 	bl	80020fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000228 	.word	0x20000228

08000eac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000228 	.word	0x20000228

08000ec4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000000c 	.word	0x2000000c

08000f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09a      	sub	sp, #104	; 0x68
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e1c9      	b.n	80012e8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d176      	bne.n	8001054 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d152      	bne.n	8001014 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fdaf 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d13b      	bne.n	8001014 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 ff6d 	bl	8001e7c <ADC_Disable>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d12f      	bne.n	8001014 <HAL_ADC_Init+0xe0>
 8000fb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d12b      	bne.n	8001014 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc4:	f023 0302 	bic.w	r3, r3, #2
 8000fc8:	f043 0202 	orr.w	r2, r3, #2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff0:	4b86      	ldr	r3, [pc, #536]	; (800120c <HAL_ADC_Init+0x2d8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a86      	ldr	r2, [pc, #536]	; (8001210 <HAL_ADC_Init+0x2dc>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9a      	lsrs	r2, r3, #18
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001006:	e002      	b.n	800100e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3b01      	subs	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f9      	bne.n	8001008 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800102c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001030:	d110      	bne.n	8001054 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f023 0312 	bic.w	r3, r3, #18
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 8136 	bne.w	80012ce <HAL_ADC_Init+0x39a>
 8001062:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8131 	bne.w	80012ce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8129 	bne.w	80012ce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001084:	f043 0202 	orr.w	r2, r3, #2
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001094:	d004      	beq.n	80010a0 <HAL_ADC_Init+0x16c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <HAL_ADC_Init+0x2e0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x170>
 80010a0:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <HAL_ADC_Init+0x2e4>)
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_Init+0x172>
 80010a4:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_ADC_Init+0x2e8>)
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b0:	d102      	bne.n	80010b8 <HAL_ADC_Init+0x184>
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <HAL_ADC_Init+0x2e0>)
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e01a      	b.n	80010ee <HAL_ADC_Init+0x1ba>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a55      	ldr	r2, [pc, #340]	; (8001214 <HAL_ADC_Init+0x2e0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d103      	bne.n	80010ca <HAL_ADC_Init+0x196>
 80010c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e011      	b.n	80010ee <HAL_ADC_Init+0x1ba>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_ADC_Init+0x2ec>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d102      	bne.n	80010da <HAL_ADC_Init+0x1a6>
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_ADC_Init+0x2f0>)
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e009      	b.n	80010ee <HAL_ADC_Init+0x1ba>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_ADC_Init+0x2f0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d102      	bne.n	80010ea <HAL_ADC_Init+0x1b6>
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <HAL_ADC_Init+0x2ec>)
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e001      	b.n	80010ee <HAL_ADC_Init+0x1ba>
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_ADC_Init+0x1da>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Init+0x1da>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_ADC_Init+0x1dc>
 800110e:	2300      	movs	r3, #0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11c      	bne.n	800114e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001114:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001116:	2b00      	cmp	r3, #0
 8001118:	d010      	beq.n	800113c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <HAL_ADC_Init+0x202>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Init+0x202>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_ADC_Init+0x204>
 8001136:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800113c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	431a      	orrs	r2, r3
 800114a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7e5b      	ldrb	r3, [r3, #25]
 8001152:	035b      	lsls	r3, r3, #13
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001158:	2a01      	cmp	r2, #1
 800115a:	d002      	beq.n	8001162 <HAL_ADC_Init+0x22e>
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	e000      	b.n	8001164 <HAL_ADC_Init+0x230>
 8001162:	2200      	movs	r2, #0
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4313      	orrs	r3, r2
 8001172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001174:	4313      	orrs	r3, r2
 8001176:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d11b      	bne.n	80011ba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7e5b      	ldrb	r3, [r3, #25]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	3b01      	subs	r3, #1
 8001190:	045a      	lsls	r2, r3, #17
 8001192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001194:	4313      	orrs	r3, r2
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	663b      	str	r3, [r7, #96]	; 0x60
 800119c:	e00d      	b.n	80011ba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011a6:	f043 0220 	orr.w	r2, r3, #32
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d03a      	beq.n	8001238 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <HAL_ADC_Init+0x2ec>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_Init+0x2a2>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_ADC_Init+0x2f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d128      	bne.n	8001228 <HAL_ADC_Init+0x2f4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80011de:	d012      	beq.n	8001206 <HAL_ADC_Init+0x2d2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e8:	d00a      	beq.n	8001200 <HAL_ADC_Init+0x2cc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80011f2:	d002      	beq.n	80011fa <HAL_ADC_Init+0x2c6>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	e018      	b.n	800122c <HAL_ADC_Init+0x2f8>
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	e015      	b.n	800122c <HAL_ADC_Init+0x2f8>
 8001200:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001204:	e012      	b.n	800122c <HAL_ADC_Init+0x2f8>
 8001206:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800120a:	e00f      	b.n	800122c <HAL_ADC_Init+0x2f8>
 800120c:	20000004 	.word	0x20000004
 8001210:	431bde83 	.word	0x431bde83
 8001214:	50000100 	.word	0x50000100
 8001218:	50000300 	.word	0x50000300
 800121c:	50000700 	.word	0x50000700
 8001220:	50000400 	.word	0x50000400
 8001224:	50000500 	.word	0x50000500
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001230:	4313      	orrs	r3, r2
 8001232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001234:	4313      	orrs	r3, r2
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d114      	bne.n	8001270 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7e1b      	ldrb	r3, [r3, #24]
 800125e:	039a      	lsls	r2, r3, #14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4313      	orrs	r3, r2
 800126a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800126c:	4313      	orrs	r3, r2
 800126e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_ADC_Init+0x3bc>)
 8001278:	4013      	ands	r3, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001280:	430b      	orrs	r3, r1
 8001282:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10c      	bne.n	80012a6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f023 010f 	bic.w	r1, r3, #15
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
 80012a4:	e007      	b.n	80012b6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020f 	bic.w	r2, r2, #15
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f023 0303 	bic.w	r3, r3, #3
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
 80012cc:	e00a      	b.n	80012e4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f023 0312 	bic.w	r3, r3, #18
 80012d6:	f043 0210 	orr.w	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3768      	adds	r7, #104	; 0x68
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	fff0c007 	.word	0xfff0c007

080012f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 80f7 	bne.w	8001502 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Start_DMA+0x2e>
 800131e:	2302      	movs	r3, #2
 8001320:	e0f2      	b.n	8001508 <HAL_ADC_Start_DMA+0x214>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001332:	d004      	beq.n	800133e <HAL_ADC_Start_DMA+0x4a>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_ADC_Start_DMA+0x21c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d109      	bne.n	8001352 <HAL_ADC_Start_DMA+0x5e>
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <HAL_ADC_Start_DMA+0x220>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	e008      	b.n	8001364 <HAL_ADC_Start_DMA+0x70>
 8001352:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_ADC_Start_DMA+0x224>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80c5 	beq.w	80014f4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fd22 	bl	8001db4 <ADC_Enable>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80b7 	bne.w	80014ea <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001398:	d004      	beq.n	80013a4 <HAL_ADC_Start_DMA+0xb0>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a5c      	ldr	r2, [pc, #368]	; (8001510 <HAL_ADC_Start_DMA+0x21c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d106      	bne.n	80013b2 <HAL_ADC_Start_DMA+0xbe>
 80013a4:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_ADC_Start_DMA+0x220>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <HAL_ADC_Start_DMA+0xde>
 80013b0:	e005      	b.n	80013be <HAL_ADC_Start_DMA+0xca>
 80013b2:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_ADC_Start_DMA+0x224>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_ADC_Start_DMA+0xde>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c6:	d004      	beq.n	80013d2 <HAL_ADC_Start_DMA+0xde>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_ADC_Start_DMA+0x228>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d115      	bne.n	80013fe <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d036      	beq.n	800145a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013fc:	e02d      	b.n	800145a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001412:	d004      	beq.n	800141e <HAL_ADC_Start_DMA+0x12a>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_ADC_Start_DMA+0x21c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10a      	bne.n	8001434 <HAL_ADC_Start_DMA+0x140>
 800141e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e008      	b.n	8001446 <HAL_ADC_Start_DMA+0x152>
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_ADC_Start_DMA+0x228>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001452:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001466:	d106      	bne.n	8001476 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f023 0206 	bic.w	r2, r3, #6
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
 8001474:	e002      	b.n	800147c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <HAL_ADC_Start_DMA+0x22c>)
 800148a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001490:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_ADC_Start_DMA+0x230>)
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_ADC_Start_DMA+0x234>)
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	221c      	movs	r2, #28
 80014a2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0210 	orr.w	r2, r2, #16
 80014b2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	4619      	mov	r1, r3
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f000 fe90 	bl	80021f8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0204 	orr.w	r2, r2, #4
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	e00d      	b.n	8001506 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014f2:	e008      	b.n	8001506 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001500:	e001      	b.n	8001506 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	50000100 	.word	0x50000100
 8001514:	50000300 	.word	0x50000300
 8001518:	50000700 	.word	0x50000700
 800151c:	50000400 	.word	0x50000400
 8001520:	08001ce9 	.word	0x08001ce9
 8001524:	08001d63 	.word	0x08001d63
 8001528:	08001d7f 	.word	0x08001d7f

0800152c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800152c:	b480      	push	{r7}
 800152e:	b09b      	sub	sp, #108	; 0x6c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x22>
 800154a:	2302      	movs	r3, #2
 800154c:	e2ca      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x5b8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 82ae 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d81c      	bhi.n	80015a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	461a      	mov	r2, r3
 8001582:	231f      	movs	r3, #31
 8001584:	4093      	lsls	r3, r2
 8001586:	43db      	mvns	r3, r3
 8001588:	4019      	ands	r1, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa00 f203 	lsl.w	r2, r0, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	e063      	b.n	8001670 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d81e      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	3b1e      	subs	r3, #30
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4019      	ands	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	3b1e      	subs	r3, #30
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e040      	b.n	8001670 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b0e      	cmp	r3, #14
 80015f4:	d81e      	bhi.n	8001634 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	3b3c      	subs	r3, #60	; 0x3c
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	3b3c      	subs	r3, #60	; 0x3c
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
 8001632:	e01d      	b.n	8001670 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	3b5a      	subs	r3, #90	; 0x5a
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	4019      	ands	r1, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3b5a      	subs	r3, #90	; 0x5a
 8001664:	fa00 f203 	lsl.w	r2, r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80e5 	bne.w	800184a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b09      	cmp	r3, #9
 8001686:	d91c      	bls.n	80016c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6999      	ldr	r1, [r3, #24]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	3b1e      	subs	r3, #30
 800169a:	2207      	movs	r2, #7
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4019      	ands	r1, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6898      	ldr	r0, [r3, #8]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	3b1e      	subs	r3, #30
 80016b4:	fa00 f203 	lsl.w	r2, r0, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	e019      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6959      	ldr	r1, [r3, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	4019      	ands	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6898      	ldr	r0, [r3, #8]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	3b01      	subs	r3, #1
 8001714:	2b03      	cmp	r3, #3
 8001716:	d84f      	bhi.n	80017b8 <HAL_ADC_ConfigChannel+0x28c>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <HAL_ADC_ConfigChannel+0x1f4>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001731 	.word	0x08001731
 8001724:	08001753 	.word	0x08001753
 8001728:	08001775 	.word	0x08001775
 800172c:	08001797 	.word	0x08001797
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001736:	4b9a      	ldr	r3, [pc, #616]	; (80019a0 <HAL_ADC_ConfigChannel+0x474>)
 8001738:	4013      	ands	r3, r2
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	0691      	lsls	r1, r2, #26
 8001740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001742:	430a      	orrs	r2, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800174e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001750:	e07e      	b.n	8001850 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001758:	4b91      	ldr	r3, [pc, #580]	; (80019a0 <HAL_ADC_ConfigChannel+0x474>)
 800175a:	4013      	ands	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	0691      	lsls	r1, r2, #26
 8001762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001764:	430a      	orrs	r2, r1
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001770:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001772:	e06d      	b.n	8001850 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_ADC_ConfigChannel+0x474>)
 800177c:	4013      	ands	r3, r2
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	0691      	lsls	r1, r2, #26
 8001784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001786:	430a      	orrs	r2, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001792:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001794:	e05c      	b.n	8001850 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_ADC_ConfigChannel+0x474>)
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	0691      	lsls	r1, r2, #26
 80017a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a8:	430a      	orrs	r2, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017b6:	e04b      	b.n	8001850 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	069b      	lsls	r3, r3, #26
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d107      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	069b      	lsls	r3, r3, #26
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d107      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	069b      	lsls	r3, r3, #26
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001822:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800182a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	069b      	lsls	r3, r3, #26
 8001834:	429a      	cmp	r2, r3
 8001836:	d10a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001846:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001848:	e001      	b.n	800184e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <HAL_ADC_ConfigChannel+0x324>
      break;
 800184e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x344>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x344>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_ADC_ConfigChannel+0x346>
 8001870:	2300      	movs	r3, #0
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8130 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d00f      	beq.n	80018a0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	400a      	ands	r2, r1
 800189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800189e:	e049      	b.n	8001934 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d91c      	bls.n	80018fc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6999      	ldr	r1, [r3, #24]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3b1b      	subs	r3, #27
 80018d4:	2207      	movs	r2, #7
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	4019      	ands	r1, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6898      	ldr	r0, [r3, #8]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1b      	subs	r3, #27
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	e01b      	b.n	8001934 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6959      	ldr	r1, [r3, #20]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6898      	ldr	r0, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800193c:	d004      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x41c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <HAL_ADC_ConfigChannel+0x478>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x420>
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_ADC_ConfigChannel+0x47c>)
 800194a:	e000      	b.n	800194e <HAL_ADC_ConfigChannel+0x422>
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_ADC_ConfigChannel+0x480>)
 800194e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d105      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001968:	2b11      	cmp	r3, #17
 800196a:	d105      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800197c:	2b12      	cmp	r3, #18
 800197e:	f040 80ab 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80a4 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d10a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x484>
 800199a:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_ADC_ConfigChannel+0x478>)
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e022      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x4ba>
 80019a0:	83fff000 	.word	0x83fff000
 80019a4:	50000100 	.word	0x50000100
 80019a8:	50000300 	.word	0x50000300
 80019ac:	50000700 	.word	0x50000700
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_ADC_ConfigChannel+0x5c4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d103      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x496>
 80019ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e011      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x4ba>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <HAL_ADC_ConfigChannel+0x5c8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x4a6>
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_ADC_ConfigChannel+0x5cc>)
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e009      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x4ba>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_ADC_ConfigChannel+0x5cc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d102      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x4b6>
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_ADC_ConfigChannel+0x5c8>)
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e001      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x4ba>
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x4da>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x4da>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x4dc>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d150      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x502>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x502>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x504>
 8001a2e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d13c      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d11d      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x54c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a44:	d118      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a50:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_ADC_ConfigChannel+0x5d0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_ADC_ConfigChannel+0x5d4>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9a      	lsrs	r2, r3, #18
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a76:	e02e      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d10b      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x56c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a88:	d106      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a96:	e01e      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b12      	cmp	r3, #18
 8001a9e:	d11a      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aaa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aac:	e013      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ac0:	e00a      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ad4:	e000      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ad6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	376c      	adds	r7, #108	; 0x6c
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	50000100 	.word	0x50000100
 8001af4:	50000400 	.word	0x50000400
 8001af8:	50000500 	.word	0x50000500
 8001afc:	20000004 	.word	0x20000004
 8001b00:	431bde83 	.word	0x431bde83

08001b04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b099      	sub	sp, #100	; 0x64
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d102      	bne.n	8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	e01a      	b.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d103      	bne.n	8001b36 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	e011      	b.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	e009      	b.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a64      	ldr	r2, [pc, #400]	; (8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d102      	bne.n	8001b56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	e001      	b.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b0      	b.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e0a9      	b.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 808d 	bne.w	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8086 	bne.w	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba0:	d004      	beq.n	8001bac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001bae:	e000      	b.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001bb2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d040      	beq.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bce:	035b      	lsls	r3, r3, #13
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bd6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d15c      	bne.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001c1a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d14b      	bne.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c28:	f023 030f 	bic.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	6811      	ldr	r1, [r2, #0]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	6892      	ldr	r2, [r2, #8]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c3c:	e03c      	b.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c48:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d123      	bne.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001c8c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d112      	bne.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c9a:	f023 030f 	bic.w	r3, r3, #15
 8001c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ca0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ca2:	e009      	b.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001cb6:	e000      	b.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cb8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3764      	adds	r7, #100	; 0x64
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	50000100 	.word	0x50000100
 8001cd8:	50000400 	.word	0x50000400
 8001cdc:	50000500 	.word	0x50000500
 8001ce0:	50000300 	.word	0x50000300
 8001ce4:	50000700 	.word	0x50000700

08001ce8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d126      	bne.n	8001d50 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7fe fc69 	bl	8000620 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d4e:	e004      	b.n	8001d5a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff f8cb 	bl	8000f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff f8bb 	bl	8000f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <ADC_Enable+0x2c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <ADC_Enable+0x2c>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <ADC_Enable+0x2e>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d143      	bne.n	8001e6e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <ADC_Enable+0xc4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e02f      	b.n	8001e70 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e20:	f7ff f844 	bl	8000eac <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e26:	e01b      	b.n	8001e60 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e28:	f7ff f840 	bl	8000eac <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d914      	bls.n	8001e60 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d00d      	beq.n	8001e60 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e007      	b.n	8001e70 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d1dc      	bne.n	8001e28 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	8000003f 	.word	0x8000003f

08001e7c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <ADC_Disable+0x2c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <ADC_Disable+0x2c>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <ADC_Disable+0x2e>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d047      	beq.n	8001f3e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030d 	and.w	r3, r3, #13
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10f      	bne.n	8001edc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0202 	orr.w	r2, r2, #2
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ed4:	f7fe ffea 	bl	8000eac <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eda:	e029      	b.n	8001f30 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e023      	b.n	8001f40 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef8:	f7fe ffd8 	bl	8000eac <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d914      	bls.n	8001f30 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10d      	bne.n	8001f30 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0210 	orr.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d0dc      	beq.n	8001ef8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <__NVIC_EnableIRQ+0x38>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ff8e 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff29 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff3e 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff8e 	bl	800203c <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff31 	bl	8001fac <__NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffa2 	bl	80020a4 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e037      	b.n	80021f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002196:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800219a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f940 	bl	8002458 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}  
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_DMA_Start_IT+0x20>
 8002214:	2302      	movs	r3, #2
 8002216:	e04a      	b.n	80022ae <HAL_DMA_Start_IT+0xb6>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002226:	2b01      	cmp	r3, #1
 8002228:	d13a      	bne.n	80022a0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f8d4 	bl	80023fc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 020e 	orr.w	r2, r2, #14
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e00f      	b.n	800228e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 020a 	orr.w	r2, r2, #10
 800227c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0204 	bic.w	r2, r2, #4
 800228c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e005      	b.n	80022ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
} 
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2204      	movs	r2, #4
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_DMA_IRQHandler+0x72>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0204 	bic.w	r2, r2, #4
 8002304:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2104      	movs	r1, #4
 8002310:	fa01 f202 	lsl.w	r2, r1, r2
 8002314:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06a      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002326:	e065      	b.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2202      	movs	r2, #2
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02c      	beq.n	8002392 <HAL_DMA_IRQHandler+0xdc>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d027      	beq.n	8002392 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 020a 	bic.w	r2, r2, #10
 800235e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2102      	movs	r1, #2
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d035      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002390:	e030      	b.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2208      	movs	r2, #8
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
    }
  }
}  
 80023f2:	e7ff      	b.n	80023f4 <HAL_DMA_IRQHandler+0x13e>
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d108      	bne.n	800243c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800243a:	e007      	b.n	800244c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <DMA_CalcBaseAndBitshift+0x60>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d80f      	bhi.n	800248c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <DMA_CalcBaseAndBitshift+0x64>)
 8002474:	4413      	add	r3, r2
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800248a:	e00e      	b.n	80024aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <DMA_CalcBaseAndBitshift+0x70>)
 8002494:	4413      	add	r3, r2
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	009a      	lsls	r2, r3, #2
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <DMA_CalcBaseAndBitshift+0x74>)
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40020407 	.word	0x40020407
 80024bc:	bffdfff8 	.word	0xbffdfff8
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	40020000 	.word	0x40020000
 80024c8:	bffdfbf8 	.word	0xbffdfbf8
 80024cc:	40020400 	.word	0x40020400

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e154      	b.n	800278a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8146 	beq.w	8002784 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x40>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0201 	and.w	r2, r3, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	6939      	ldr	r1, [r7, #16]
 80025fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80a0 	beq.w	8002784 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_GPIO_Init+0x2d8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a57      	ldr	r2, [pc, #348]	; (80027a8 <HAL_GPIO_Init+0x2d8>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_GPIO_Init+0x2d8>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265c:	4a53      	ldr	r2, [pc, #332]	; (80027ac <HAL_GPIO_Init+0x2dc>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002686:	d019      	beq.n	80026bc <HAL_GPIO_Init+0x1ec>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_GPIO_Init+0x1e8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2e4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1e4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1e0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_GPIO_Init+0x2ec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1dc>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e008      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026ac:	2305      	movs	r3, #5
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b0:	2303      	movs	r3, #3
 80026b2:	e004      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e002      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026bc:	2300      	movs	r3, #0
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	f002 0203 	and.w	r2, r2, #3
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4093      	lsls	r3, r2
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ce:	4937      	ldr	r1, [pc, #220]	; (80027ac <HAL_GPIO_Init+0x2dc>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002700:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f aea3 	bne.w	80024e0 <HAL_GPIO_Init+0x10>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	48000800 	.word	0x48000800
 80027b8:	48000c00 	.word	0x48000c00
 80027bc:	48001000 	.word	0x48001000
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002804:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f001 b823 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 817d 	beq.w	8002b2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002830:	4bbc      	ldr	r3, [pc, #752]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b04      	cmp	r3, #4
 800283a:	d00c      	beq.n	8002856 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800283c:	4bb9      	ldr	r3, [pc, #740]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d15c      	bne.n	8002902 <HAL_RCC_OscConfig+0x10e>
 8002848:	4bb6      	ldr	r3, [pc, #728]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d155      	bne.n	8002902 <HAL_RCC_OscConfig+0x10e>
 8002856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800285a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800286a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_RCC_OscConfig+0x94>
 8002882:	4ba8      	ldr	r3, [pc, #672]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e015      	b.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 8002888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800289c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80028a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80028b0:	4b9c      	ldr	r3, [pc, #624]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 811f 	beq.w	8002b28 <HAL_RCC_OscConfig+0x334>
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8116 	bne.w	8002b28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f000 bfaf 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x12e>
 8002914:	4b83      	ldr	r3, [pc, #524]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a82      	ldr	r2, [pc, #520]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e036      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x158>
 8002932:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7b      	ldr	r2, [pc, #492]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a78      	ldr	r2, [pc, #480]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e021      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x184>
 800295e:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6d      	ldr	r2, [pc, #436]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f023 020f 	bic.w	r2, r3, #15
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	495f      	ldr	r1, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d059      	beq.n	8002a6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa77 	bl	8000eac <HAL_GetTick>
 80029be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fa72 	bl	8000eac <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d902      	bls.n	80029da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	f000 bf43 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x218>
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e015      	b.n	8002a38 <HAL_RCC_OscConfig+0x244>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0220 	orr.w	r2, r2, #32
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ab      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1d0>
 8002a6c:	e05d      	b.n	8002b2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa1d 	bl	8000eac <HAL_GetTick>
 8002a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa18 	bl	8000eac <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bee9 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002aa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2cc>
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e015      	b.n	8002aec <HAL_RCC_OscConfig+0x2f8>
 8002ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002adc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002af4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f002 021f 	and.w	r2, r2, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ab      	bne.n	8002a78 <HAL_RCC_OscConfig+0x284>
 8002b20:	e003      	b.n	8002b2a <HAL_RCC_OscConfig+0x336>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 817d 	beq.w	8002e3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b40:	4ba6      	ldr	r3, [pc, #664]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b4c:	4ba3      	ldr	r3, [pc, #652]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d172      	bne.n	8002c3e <HAL_RCC_OscConfig+0x44a>
 8002b58:	4ba0      	ldr	r3, [pc, #640]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d16c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x44a>
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3a0>
 8002b8e:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0x3c8>
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002bb8:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002bc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002bce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x410>
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 be2e 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	21f8      	movs	r1, #248	; 0xf8
 8002c1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c22:	fa91 f1a1 	rbit	r1, r1
 8002c26:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c2e:	fab1 f181 	clz	r1, r1
 8002c32:	b2c9      	uxtb	r1, r1
 8002c34:	408b      	lsls	r3, r1
 8002c36:	4969      	ldr	r1, [pc, #420]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3c:	e0fd      	b.n	8002e3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8088 	beq.w	8002d60 <HAL_RCC_OscConfig+0x56c>
 8002c50:	2301      	movs	r3, #1
 8002c52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	2301      	movs	r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f916 	bl	8000eac <HAL_GetTick>
 8002c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fe f911 	bl	8000eac <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f000 bde2 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002cae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4d8>
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e013      	b.n	8002cf4 <HAL_RCC_OscConfig+0x500>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ce4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002cfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0af      	beq.n	8002c86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	21f8      	movs	r1, #248	; 0xf8
 8002d3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d44:	fa91 f1a1 	rbit	r1, r1
 8002d48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d50:	fab1 f181 	clz	r1, r1
 8002d54:	b2c9      	uxtb	r1, r1
 8002d56:	408b      	lsls	r3, r1
 8002d58:	4920      	ldr	r1, [pc, #128]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
 8002d5e:	e06c      	b.n	8002e3a <HAL_RCC_OscConfig+0x646>
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f88e 	bl	8000eac <HAL_GetTick>
 8002d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe f889 	bl	8000eac <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	f000 bd5a 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d104      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5ec>
 8002dd6:	4b01      	ldr	r3, [pc, #4]	; (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x614>
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002df2:	2302      	movs	r3, #2
 8002df4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002df8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e04:	4bc8      	ldr	r3, [pc, #800]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ad      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8110 	beq.w	8003070 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d079      	beq.n	8002f54 <HAL_RCC_OscConfig+0x760>
 8002e60:	2301      	movs	r3, #1
 8002e62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4bab      	ldr	r3, [pc, #684]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	2301      	movs	r3, #1
 8002e88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe f80f 	bl	8000eac <HAL_GetTick>
 8002e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe f80a 	bl	8000eac <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d902      	bls.n	8002eaa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f000 bcdb 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f04:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 8002f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f10:	2102      	movs	r1, #2
 8002f12:	6019      	str	r1, [r3, #0]
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f1a3 	rbit	r1, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f2a:	6019      	str	r1, [r3, #0]
  return result;
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0a0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x6a0>
 8002f52:	e08d      	b.n	8003070 <HAL_RCC_OscConfig+0x87c>
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f76:	601a      	str	r2, [r3, #0]
  return result;
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b68      	ldr	r3, [pc, #416]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	461a      	mov	r2, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd ff89 	bl	8000eac <HAL_GetTick>
 8002f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd ff84 	bl	8000eac <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	f000 bc55 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f2a3 	rbit	r2, r3
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003006:	2202      	movs	r2, #2
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003020:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800302e:	2102      	movs	r1, #2
 8003030:	6019      	str	r1, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f1a3 	rbit	r1, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003048:	6019      	str	r1, [r3, #0]
  return result;
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d197      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 81a1 	beq.w	80033c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308c:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	61d3      	str	r3, [r2, #28]
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11a      	bne.n	8003108 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fd fee5 	bl	8000eac <HAL_GetTick>
 80030e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fee0 	bl	8000eac <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b64      	cmp	r3, #100	; 0x64
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e3b1      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <HAL_RCC_OscConfig+0x940>
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a02      	ldr	r2, [pc, #8]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e03c      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	10908120 	.word	0x10908120
 8003130:	40007000 	.word	0x40007000
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x96a>
 8003144:	4bc1      	ldr	r3, [pc, #772]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4ac0      	ldr	r2, [pc, #768]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4bbe      	ldr	r3, [pc, #760]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4abd      	ldr	r2, [pc, #756]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e020      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x994>
 800316e:	4bb7      	ldr	r3, [pc, #732]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4ab6      	ldr	r2, [pc, #728]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	4bb4      	ldr	r3, [pc, #720]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4ab3      	ldr	r2, [pc, #716]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 8003188:	4bb0      	ldr	r3, [pc, #704]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4aaf      	ldr	r2, [pc, #700]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	4bad      	ldr	r3, [pc, #692]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4aac      	ldr	r2, [pc, #688]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8081 	beq.w	80032b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fe7b 	bl	8000eac <HAL_GetTick>
 80031b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fd fe76 	bl	8000eac <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e345      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003200:	2202      	movs	r2, #2
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800321a:	601a      	str	r2, [r3, #0]
  return result;
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003224:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0xa4c>
 800323a:	4b84      	ldr	r3, [pc, #528]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0xa74>
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	4b79      	ldr	r3, [pc, #484]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003270:	2102      	movs	r1, #2
 8003272:	6011      	str	r1, [r2, #0]
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fa92 f1a2 	rbit	r1, r2
 8003282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003286:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003290:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d084      	beq.n	80031bc <HAL_RCC_OscConfig+0x9c8>
 80032b2:	e07f      	b.n	80033b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fd fdfa 	bl	8000eac <HAL_GetTick>
 80032b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fdf5 	bl	8000eac <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2c4      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800331c:	601a      	str	r2, [r3, #0]
  return result;
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003326:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0xb4e>
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	e013      	b.n	800336a <HAL_RCC_OscConfig+0xb76>
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003372:	2102      	movs	r1, #2
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fa92 f1a2 	rbit	r1, r2
 8003384:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003388:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800338c:	6011      	str	r1, [r2, #0]
  return result;
 800338e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003392:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d184      	bne.n	80032be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8242 	beq.w	800385e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_RCC_OscConfig+0xc58>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	f000 8213 	beq.w	800380e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f040 8162 	bne.w	80036be <HAL_RCC_OscConfig+0xeca>
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003402:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003428:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003434:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fd34 	bl	8000eac <HAL_GetTick>
 8003444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e00c      	b.n	8003464 <HAL_RCC_OscConfig+0xc70>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fd2c 	bl	8000eac <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1fd      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800346c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	fa93 f2a3 	rbit	r2, r3
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003488:	601a      	str	r2, [r3, #0]
  return result;
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003492:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0xcba>
 80034a8:	4bb0      	ldr	r3, [pc, #704]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e027      	b.n	80034fe <HAL_RCC_OscConfig+0xd0a>
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	4b9c      	ldr	r3, [pc, #624]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003502:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003506:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800350a:	6011      	str	r1, [r2, #0]
 800350c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003510:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	fa92 f1a2 	rbit	r1, r2
 800351a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003522:	6011      	str	r1, [r2, #0]
  return result;
 8003524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003528:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	fab2 f282 	clz	r2, r2
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f042 0220 	orr.w	r2, r2, #32
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	f002 021f 	and.w	r2, r2, #31
 800353e:	2101      	movs	r1, #1
 8003540:	fa01 f202 	lsl.w	r2, r1, r2
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d182      	bne.n	8003450 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	430b      	orrs	r3, r1
 800356c:	497f      	ldr	r1, [pc, #508]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800357a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2301      	movs	r3, #1
 80035b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fc78 	bl	8000eac <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c0:	e009      	b.n	80035d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fc73 	bl	8000eac <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e144      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003604:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0xe2c>
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e027      	b.n	8003670 <HAL_RCC_OscConfig+0xe7c>
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800364e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003674:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003678:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003682:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fa92 f1a2 	rbit	r1, r2
 800368c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003690:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003694:	6011      	str	r1, [r2, #0]
  return result;
 8003696:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800369a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f002 021f 	and.w	r2, r2, #31
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d082      	beq.n	80035c2 <HAL_RCC_OscConfig+0xdce>
 80036bc:	e0cf      	b.n	800385e <HAL_RCC_OscConfig+0x106a>
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036e2:	601a      	str	r2, [r3, #0]
  return result;
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd fbd2 	bl	8000eac <HAL_GetTick>
 8003708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	e009      	b.n	8003722 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd fbcd 	bl	8000eac <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e09e      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800372a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003746:	601a      	str	r2, [r3, #0]
  return result;
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003750:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d104      	bne.n	8003770 <HAL_RCC_OscConfig+0xf7c>
 8003766:	4b01      	ldr	r3, [pc, #4]	; (800376c <HAL_RCC_OscConfig+0xf78>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e029      	b.n	80037c0 <HAL_RCC_OscConfig+0xfcc>
 800376c:	40021000 	.word	0x40021000
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800379e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x1078>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037cc:	6011      	str	r1, [r2, #0]
 80037ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	fa92 f1a2 	rbit	r1, r2
 80037dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037e4:	6011      	str	r1, [r2, #0]
  return result;
 80037e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f002 021f 	and.w	r2, r2, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d180      	bne.n	800370e <HAL_RCC_OscConfig+0xf1a>
 800380c:	e027      	b.n	800385e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01e      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_OscConfig+0x1078>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800382a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800382e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	429a      	cmp	r2, r3
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003842:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b09e      	sub	sp, #120	; 0x78
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e162      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b90      	ldr	r3, [pc, #576]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	498b      	ldr	r1, [pc, #556]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b89      	ldr	r3, [pc, #548]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e14a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	497f      	ldr	r1, [pc, #508]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80dc 	beq.w	8003a9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d13c      	bne.n	8003966 <HAL_RCC_ClockConfig+0xf6>
 80038ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_RCC_ClockConfig+0xa6>
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	e00f      	b.n	8003936 <HAL_RCC_ClockConfig+0xc6>
 8003916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	667b      	str	r3, [r7, #100]	; 0x64
 8003924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
 800392a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393a:	65ba      	str	r2, [r7, #88]	; 0x58
 800393c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d17b      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0f3      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d13c      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x178>
 800396e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_RCC_ClockConfig+0x128>
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e00f      	b.n	80039b8 <HAL_RCC_ClockConfig+0x148>
 8003998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
 80039ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b4:	4b46      	ldr	r3, [pc, #280]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80039be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f042 0220 	orr.w	r2, r2, #32
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f002 021f 	and.w	r2, r2, #31
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13a      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b2      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 80039e8:	2302      	movs	r3, #2
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1bc>
 8003a10:	2302      	movs	r3, #2
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	61ba      	str	r2, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	617a      	str	r2, [r7, #20]
  return result;
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e079      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fa1e 	bl	8000eac <HAL_GetTick>
 8003a70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fd fa1a 	bl	8000eac <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e061      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d214      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4906      	ldr	r1, [pc, #24]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e040      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	491a      	ldr	r1, [pc, #104]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4912      	ldr	r1, [pc, #72]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b12:	f000 f829 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b20:	22f0      	movs	r2, #240	; 0xf0
 8003b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	40d3      	lsrs	r3, r2
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x2ec>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCC_ClockConfig+0x2f0>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCC_ClockConfig+0x2f4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd f96c 	bl	8000e24 <HAL_InitTick>
  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3778      	adds	r7, #120	; 0x78
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	0800527c 	.word	0x0800527c
 8003b60:	20000004 	.word	0x20000004
 8003b64:	20000008 	.word	0x20000008

08003b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b08b      	sub	sp, #44	; 0x2c
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x30>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x36>
 8003b96:	e03c      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b9a:	623b      	str	r3, [r7, #32]
      break;
 8003b9c:	e03c      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ba4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ba8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	fa92 f2a2 	rbit	r2, r2
 8003bb0:	607a      	str	r2, [r7, #4]
  return result;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	40d3      	lsrs	r3, r2
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	220f      	movs	r2, #15
 8003bcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	40d3      	lsrs	r3, r2
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e004      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	623b      	str	r3, [r7, #32]
      break;
 8003c10:	e002      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c14:	623b      	str	r3, [r7, #32]
      break;
 8003c16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	372c      	adds	r7, #44	; 0x2c
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	007a1200 	.word	0x007a1200
 8003c30:	08005294 	.word	0x08005294
 8003c34:	080052a4 	.word	0x080052a4
 8003c38:	003d0900 	.word	0x003d0900

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000004 	.word	0x20000004

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c5a:	f7ff ffef 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5e:	4601      	mov	r1, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	fa92 f2a2 	rbit	r2, r2
 8003c74:	603a      	str	r2, [r7, #0]
  return result;
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	40d3      	lsrs	r3, r2
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0800528c 	.word	0x0800528c

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c9e:	f7ff ffcd 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003cac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	fa92 f2a2 	rbit	r2, r2
 8003cb8:	603a      	str	r2, [r7, #0]
  return result;
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	40d3      	lsrs	r3, r2
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cc6:	5cd3      	ldrb	r3, [r2, r3]
 8003cc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	0800528c 	.word	0x0800528c

08003cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b092      	sub	sp, #72	; 0x48
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80d4 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10e      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	61d3      	str	r3, [r2, #28]
 8003d18:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d118      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d36:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d42:	f7fd f8b3 	bl	8000eac <HAL_GetTick>
 8003d46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4a:	f7fd f8af 	bl	8000eac <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b64      	cmp	r3, #100	; 0x64
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e169      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8084 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d07c      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	461a      	mov	r2, r3
 8003db2:	2301      	movs	r3, #1
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fd f85f 	bl	8000eac <HAL_GetTick>
 8003dee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd f85b 	bl	8000eac <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e113      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	2302      	movs	r3, #2
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003e20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d108      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e36:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	e00d      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
 8003e44:	10908100 	.word	0x10908100
 8003e48:	2302      	movs	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	4b78      	ldr	r3, [pc, #480]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2202      	movs	r2, #2
 8003e5a:	613a      	str	r2, [r7, #16]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	fa92 f2a2 	rbit	r2, r2
 8003e62:	60fa      	str	r2, [r7, #12]
  return result;
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	fab2 f282 	clz	r2, r2
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f002 021f 	and.w	r2, r2, #31
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0b7      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e82:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	496a      	ldr	r1, [pc, #424]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9c:	4b66      	ldr	r3, [pc, #408]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4a65      	ldr	r2, [pc, #404]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb4:	4b60      	ldr	r3, [pc, #384]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f023 0203 	bic.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	495d      	ldr	r1, [pc, #372]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed2:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4956      	ldr	r1, [pc, #344]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef0:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	494e      	ldr	r1, [pc, #312]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f0e:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	4947      	ldr	r1, [pc, #284]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	493f      	ldr	r1, [pc, #252]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f023 0220 	bic.w	r2, r3, #32
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4938      	ldr	r1, [pc, #224]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f68:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	4930      	ldr	r1, [pc, #192]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f86:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	4929      	ldr	r1, [pc, #164]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	4921      	ldr	r1, [pc, #132]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	491a      	ldr	r1, [pc, #104]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fe0:	4b15      	ldr	r3, [pc, #84]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	4912      	ldr	r1, [pc, #72]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	490b      	ldr	r1, [pc, #44]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3748      	adds	r7, #72	; 0x48
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e040      	b.n	80040d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc fdac 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2224      	movs	r2, #36	; 0x24
 8004068:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8c0 	bl	8004200 <UART_SetConfig>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e022      	b.n	80040d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa8a 	bl	80045ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb11 	bl	80046f0 <UART_CheckIdleState>
 80040ce:	4603      	mov	r3, r0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 8082 	bne.w	80041f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_UART_Transmit+0x26>
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07a      	b.n	80041f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_UART_Transmit+0x38>
 800410c:	2302      	movs	r3, #2
 800410e:	e073      	b.n	80041f8 <HAL_UART_Transmit+0x120>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2221      	movs	r2, #33	; 0x21
 8004124:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004126:	f7fc fec1 	bl	8000eac <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d108      	bne.n	8004158 <HAL_UART_Transmit+0x80>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e003      	b.n	8004160 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004168:	e02d      	b.n	80041c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fb04 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e039      	b.n	80041f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004196:	b292      	uxth	r2, r2
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3302      	adds	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e008      	b.n	80041b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	b292      	uxth	r2, r2
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cb      	bne.n	800416a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fad0 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e005      	b.n	80041f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800422e:	f023 030c 	bic.w	r3, r3, #12
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	430b      	orrs	r3, r1
 800423a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4aa8      	ldr	r2, [pc, #672]	; (800451c <UART_SetConfig+0x31c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d120      	bne.n	80042c2 <UART_SetConfig+0xc2>
 8004280:	4ba7      	ldr	r3, [pc, #668]	; (8004520 <UART_SetConfig+0x320>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b03      	cmp	r3, #3
 800428a:	d817      	bhi.n	80042bc <UART_SetConfig+0xbc>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x94>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b1 	.word	0x080042b1
 800429c:	080042b7 	.word	0x080042b7
 80042a0:	080042ab 	.word	0x080042ab
 80042a4:	2301      	movs	r3, #1
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e0b5      	b.n	8004416 <UART_SetConfig+0x216>
 80042aa:	2302      	movs	r3, #2
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e0b2      	b.n	8004416 <UART_SetConfig+0x216>
 80042b0:	2304      	movs	r3, #4
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e0af      	b.n	8004416 <UART_SetConfig+0x216>
 80042b6:	2308      	movs	r3, #8
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e0ac      	b.n	8004416 <UART_SetConfig+0x216>
 80042bc:	2310      	movs	r3, #16
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e0a9      	b.n	8004416 <UART_SetConfig+0x216>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a97      	ldr	r2, [pc, #604]	; (8004524 <UART_SetConfig+0x324>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d124      	bne.n	8004316 <UART_SetConfig+0x116>
 80042cc:	4b94      	ldr	r3, [pc, #592]	; (8004520 <UART_SetConfig+0x320>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042d8:	d011      	beq.n	80042fe <UART_SetConfig+0xfe>
 80042da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042de:	d817      	bhi.n	8004310 <UART_SetConfig+0x110>
 80042e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e4:	d011      	beq.n	800430a <UART_SetConfig+0x10a>
 80042e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ea:	d811      	bhi.n	8004310 <UART_SetConfig+0x110>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <UART_SetConfig+0xf8>
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d006      	beq.n	8004304 <UART_SetConfig+0x104>
 80042f6:	e00b      	b.n	8004310 <UART_SetConfig+0x110>
 80042f8:	2300      	movs	r3, #0
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e08b      	b.n	8004416 <UART_SetConfig+0x216>
 80042fe:	2302      	movs	r3, #2
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e088      	b.n	8004416 <UART_SetConfig+0x216>
 8004304:	2304      	movs	r3, #4
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e085      	b.n	8004416 <UART_SetConfig+0x216>
 800430a:	2308      	movs	r3, #8
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e082      	b.n	8004416 <UART_SetConfig+0x216>
 8004310:	2310      	movs	r3, #16
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e07f      	b.n	8004416 <UART_SetConfig+0x216>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a83      	ldr	r2, [pc, #524]	; (8004528 <UART_SetConfig+0x328>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d124      	bne.n	800436a <UART_SetConfig+0x16a>
 8004320:	4b7f      	ldr	r3, [pc, #508]	; (8004520 <UART_SetConfig+0x320>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800432c:	d011      	beq.n	8004352 <UART_SetConfig+0x152>
 800432e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004332:	d817      	bhi.n	8004364 <UART_SetConfig+0x164>
 8004334:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004338:	d011      	beq.n	800435e <UART_SetConfig+0x15e>
 800433a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800433e:	d811      	bhi.n	8004364 <UART_SetConfig+0x164>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <UART_SetConfig+0x14c>
 8004344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004348:	d006      	beq.n	8004358 <UART_SetConfig+0x158>
 800434a:	e00b      	b.n	8004364 <UART_SetConfig+0x164>
 800434c:	2300      	movs	r3, #0
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e061      	b.n	8004416 <UART_SetConfig+0x216>
 8004352:	2302      	movs	r3, #2
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e05e      	b.n	8004416 <UART_SetConfig+0x216>
 8004358:	2304      	movs	r3, #4
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e05b      	b.n	8004416 <UART_SetConfig+0x216>
 800435e:	2308      	movs	r3, #8
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e058      	b.n	8004416 <UART_SetConfig+0x216>
 8004364:	2310      	movs	r3, #16
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e055      	b.n	8004416 <UART_SetConfig+0x216>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6f      	ldr	r2, [pc, #444]	; (800452c <UART_SetConfig+0x32c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d124      	bne.n	80043be <UART_SetConfig+0x1be>
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <UART_SetConfig+0x320>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800437c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004380:	d011      	beq.n	80043a6 <UART_SetConfig+0x1a6>
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004386:	d817      	bhi.n	80043b8 <UART_SetConfig+0x1b8>
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438c:	d011      	beq.n	80043b2 <UART_SetConfig+0x1b2>
 800438e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004392:	d811      	bhi.n	80043b8 <UART_SetConfig+0x1b8>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x1a0>
 8004398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x1ac>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x1b8>
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e037      	b.n	8004416 <UART_SetConfig+0x216>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e034      	b.n	8004416 <UART_SetConfig+0x216>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e031      	b.n	8004416 <UART_SetConfig+0x216>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e02e      	b.n	8004416 <UART_SetConfig+0x216>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e02b      	b.n	8004416 <UART_SetConfig+0x216>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5b      	ldr	r2, [pc, #364]	; (8004530 <UART_SetConfig+0x330>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d124      	bne.n	8004412 <UART_SetConfig+0x212>
 80043c8:	4b55      	ldr	r3, [pc, #340]	; (8004520 <UART_SetConfig+0x320>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80043d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043d4:	d011      	beq.n	80043fa <UART_SetConfig+0x1fa>
 80043d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043da:	d817      	bhi.n	800440c <UART_SetConfig+0x20c>
 80043dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e0:	d011      	beq.n	8004406 <UART_SetConfig+0x206>
 80043e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e6:	d811      	bhi.n	800440c <UART_SetConfig+0x20c>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <UART_SetConfig+0x1f4>
 80043ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f0:	d006      	beq.n	8004400 <UART_SetConfig+0x200>
 80043f2:	e00b      	b.n	800440c <UART_SetConfig+0x20c>
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e00d      	b.n	8004416 <UART_SetConfig+0x216>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e00a      	b.n	8004416 <UART_SetConfig+0x216>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e007      	b.n	8004416 <UART_SetConfig+0x216>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e004      	b.n	8004416 <UART_SetConfig+0x216>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e001      	b.n	8004416 <UART_SetConfig+0x216>
 8004412:	2310      	movs	r3, #16
 8004414:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d15c      	bne.n	80044da <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	2b08      	cmp	r3, #8
 8004424:	d827      	bhi.n	8004476 <UART_SetConfig+0x276>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x22c>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	08004477 	.word	0x08004477
 800443c:	08004467 	.word	0x08004467
 8004440:	08004477 	.word	0x08004477
 8004444:	08004477 	.word	0x08004477
 8004448:	08004477 	.word	0x08004477
 800444c:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7ff fc00 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004454:	61b8      	str	r0, [r7, #24]
        break;
 8004456:	e013      	b.n	8004480 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7ff fc1e 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 800445c:	61b8      	str	r0, [r7, #24]
        break;
 800445e:	e00f      	b.n	8004480 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b34      	ldr	r3, [pc, #208]	; (8004534 <UART_SetConfig+0x334>)
 8004462:	61bb      	str	r3, [r7, #24]
        break;
 8004464:	e00c      	b.n	8004480 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7ff fb7f 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 800446a:	61b8      	str	r0, [r7, #24]
        break;
 800446c:	e008      	b.n	8004480 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e004      	b.n	8004480 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77bb      	strb	r3, [r7, #30]
        break;
 800447e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8084 	beq.w	8004590 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	005a      	lsls	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	441a      	add	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	b29b      	uxth	r3, r3
 800449e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b0f      	cmp	r3, #15
 80044a4:	d916      	bls.n	80044d4 <UART_SetConfig+0x2d4>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d212      	bcs.n	80044d4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f023 030f 	bic.w	r3, r3, #15
 80044b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	89fb      	ldrh	r3, [r7, #14]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	89fa      	ldrh	r2, [r7, #14]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	e05d      	b.n	8004590 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	77bb      	strb	r3, [r7, #30]
 80044d8:	e05a      	b.n	8004590 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044da:	7ffb      	ldrb	r3, [r7, #31]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d836      	bhi.n	800454e <UART_SetConfig+0x34e>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x2e8>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004515 	.word	0x08004515
 80044f0:	08004539 	.word	0x08004539
 80044f4:	0800454f 	.word	0x0800454f
 80044f8:	0800453f 	.word	0x0800453f
 80044fc:	0800454f 	.word	0x0800454f
 8004500:	0800454f 	.word	0x0800454f
 8004504:	0800454f 	.word	0x0800454f
 8004508:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7ff fba2 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004510:	61b8      	str	r0, [r7, #24]
        break;
 8004512:	e021      	b.n	8004558 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004514:	f7ff fbc0 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8004518:	61b8      	str	r0, [r7, #24]
        break;
 800451a:	e01d      	b.n	8004558 <UART_SetConfig+0x358>
 800451c:	40013800 	.word	0x40013800
 8004520:	40021000 	.word	0x40021000
 8004524:	40004400 	.word	0x40004400
 8004528:	40004800 	.word	0x40004800
 800452c:	40004c00 	.word	0x40004c00
 8004530:	40005000 	.word	0x40005000
 8004534:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <UART_SetConfig+0x3a8>)
 800453a:	61bb      	str	r3, [r7, #24]
        break;
 800453c:	e00c      	b.n	8004558 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7ff fb13 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8004542:	61b8      	str	r0, [r7, #24]
        break;
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	61bb      	str	r3, [r7, #24]
        break;
 800454c:	e004      	b.n	8004558 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	77bb      	strb	r3, [r7, #30]
        break;
 8004556:	bf00      	nop
    }

    if (pclk != 0U)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d018      	beq.n	8004590 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	085a      	lsrs	r2, r3, #1
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	d908      	bls.n	800458c <UART_SetConfig+0x38c>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d204      	bcs.n	800458c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e001      	b.n	8004590 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800459c:	7fbb      	ldrb	r3, [r7, #30]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	007a1200 	.word	0x007a1200

080045ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046aa:	d10a      	bne.n	80046c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004700:	f7fc fbd4 	bl	8000eac <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d10e      	bne.n	8004732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f82d 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e023      	b.n	800477a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d10e      	bne.n	800475e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f817 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e00d      	b.n	800477a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b09c      	sub	sp, #112	; 0x70
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	e0a5      	b.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	f000 80a1 	beq.w	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479e:	f7fc fb85 	bl	8000eac <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d13e      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004806:	64ba      	str	r2, [r7, #72]	; 0x48
 8004808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e067      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d04f      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484e:	d147      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004858:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800486e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800487e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	613b      	str	r3, [r7, #16]
   return(result);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048ac:	623a      	str	r2, [r7, #32]
 80048ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	69f9      	ldr	r1, [r7, #28]
 80048b2:	6a3a      	ldr	r2, [r7, #32]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e010      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	f43f af4a 	beq.w	8004794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3770      	adds	r7, #112	; 0x70
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	; (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000010 	.word	0x20000010

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 fc8e 	bl	800524c <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	080052e8 	.word	0x080052e8
 8004954:	080052e8 	.word	0x080052e8
 8004958:	080052e8 	.word	0x080052e8
 800495c:	080052ec 	.word	0x080052ec

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <siprintf>:
 8004970:	b40e      	push	{r1, r2, r3}
 8004972:	b500      	push	{lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	ab1d      	add	r3, sp, #116	; 0x74
 8004978:	9002      	str	r0, [sp, #8]
 800497a:	9006      	str	r0, [sp, #24]
 800497c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <siprintf+0x38>)
 8004982:	9107      	str	r1, [sp, #28]
 8004984:	9104      	str	r1, [sp, #16]
 8004986:	4909      	ldr	r1, [pc, #36]	; (80049ac <siprintf+0x3c>)
 8004988:	f853 2b04 	ldr.w	r2, [r3], #4
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	a902      	add	r1, sp, #8
 8004994:	f000 f868 	bl	8004a68 <_svfiprintf_r>
 8004998:	9b02      	ldr	r3, [sp, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	b01c      	add	sp, #112	; 0x70
 80049a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a4:	b003      	add	sp, #12
 80049a6:	4770      	bx	lr
 80049a8:	20000010 	.word	0x20000010
 80049ac:	ffff0208 	.word	0xffff0208

080049b0 <__ssputs_r>:
 80049b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	688e      	ldr	r6, [r1, #8]
 80049b6:	429e      	cmp	r6, r3
 80049b8:	4682      	mov	sl, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4690      	mov	r8, r2
 80049be:	461f      	mov	r7, r3
 80049c0:	d838      	bhi.n	8004a34 <__ssputs_r+0x84>
 80049c2:	898a      	ldrh	r2, [r1, #12]
 80049c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049c8:	d032      	beq.n	8004a30 <__ssputs_r+0x80>
 80049ca:	6825      	ldr	r5, [r4, #0]
 80049cc:	6909      	ldr	r1, [r1, #16]
 80049ce:	eba5 0901 	sub.w	r9, r5, r1
 80049d2:	6965      	ldr	r5, [r4, #20]
 80049d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049dc:	3301      	adds	r3, #1
 80049de:	444b      	add	r3, r9
 80049e0:	106d      	asrs	r5, r5, #1
 80049e2:	429d      	cmp	r5, r3
 80049e4:	bf38      	it	cc
 80049e6:	461d      	movcc	r5, r3
 80049e8:	0553      	lsls	r3, r2, #21
 80049ea:	d531      	bpl.n	8004a50 <__ssputs_r+0xa0>
 80049ec:	4629      	mov	r1, r5
 80049ee:	f000 fb63 	bl	80050b8 <_malloc_r>
 80049f2:	4606      	mov	r6, r0
 80049f4:	b950      	cbnz	r0, 8004a0c <__ssputs_r+0x5c>
 80049f6:	230c      	movs	r3, #12
 80049f8:	f8ca 3000 	str.w	r3, [sl]
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0c:	6921      	ldr	r1, [r4, #16]
 8004a0e:	464a      	mov	r2, r9
 8004a10:	f000 fabe 	bl	8004f90 <memcpy>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	6126      	str	r6, [r4, #16]
 8004a22:	6165      	str	r5, [r4, #20]
 8004a24:	444e      	add	r6, r9
 8004a26:	eba5 0509 	sub.w	r5, r5, r9
 8004a2a:	6026      	str	r6, [r4, #0]
 8004a2c:	60a5      	str	r5, [r4, #8]
 8004a2e:	463e      	mov	r6, r7
 8004a30:	42be      	cmp	r6, r7
 8004a32:	d900      	bls.n	8004a36 <__ssputs_r+0x86>
 8004a34:	463e      	mov	r6, r7
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	4632      	mov	r2, r6
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	f000 fab6 	bl	8004fac <memmove>
 8004a40:	68a3      	ldr	r3, [r4, #8]
 8004a42:	1b9b      	subs	r3, r3, r6
 8004a44:	60a3      	str	r3, [r4, #8]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	4433      	add	r3, r6
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e7db      	b.n	8004a08 <__ssputs_r+0x58>
 8004a50:	462a      	mov	r2, r5
 8004a52:	f000 fba5 	bl	80051a0 <_realloc_r>
 8004a56:	4606      	mov	r6, r0
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d1e1      	bne.n	8004a20 <__ssputs_r+0x70>
 8004a5c:	6921      	ldr	r1, [r4, #16]
 8004a5e:	4650      	mov	r0, sl
 8004a60:	f000 fabe 	bl	8004fe0 <_free_r>
 8004a64:	e7c7      	b.n	80049f6 <__ssputs_r+0x46>
	...

08004a68 <_svfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	4698      	mov	r8, r3
 8004a6e:	898b      	ldrh	r3, [r1, #12]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	b09d      	sub	sp, #116	; 0x74
 8004a74:	4607      	mov	r7, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	d50e      	bpl.n	8004a9a <_svfiprintf_r+0x32>
 8004a7c:	690b      	ldr	r3, [r1, #16]
 8004a7e:	b963      	cbnz	r3, 8004a9a <_svfiprintf_r+0x32>
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	f000 fb19 	bl	80050b8 <_malloc_r>
 8004a86:	6028      	str	r0, [r5, #0]
 8004a88:	6128      	str	r0, [r5, #16]
 8004a8a:	b920      	cbnz	r0, 8004a96 <_svfiprintf_r+0x2e>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e0d1      	b.n	8004c3a <_svfiprintf_r+0x1d2>
 8004a96:	2340      	movs	r3, #64	; 0x40
 8004a98:	616b      	str	r3, [r5, #20]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa8:	2330      	movs	r3, #48	; 0x30
 8004aaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c54 <_svfiprintf_r+0x1ec>
 8004aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ab2:	f04f 0901 	mov.w	r9, #1
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	469a      	mov	sl, r3
 8004aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004abe:	b10a      	cbz	r2, 8004ac4 <_svfiprintf_r+0x5c>
 8004ac0:	2a25      	cmp	r2, #37	; 0x25
 8004ac2:	d1f9      	bne.n	8004ab8 <_svfiprintf_r+0x50>
 8004ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac8:	d00b      	beq.n	8004ae2 <_svfiprintf_r+0x7a>
 8004aca:	465b      	mov	r3, fp
 8004acc:	4622      	mov	r2, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7ff ff6d 	bl	80049b0 <__ssputs_r>
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f000 80aa 	beq.w	8004c30 <_svfiprintf_r+0x1c8>
 8004adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ade:	445a      	add	r2, fp
 8004ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80a2 	beq.w	8004c30 <_svfiprintf_r+0x1c8>
 8004aec:	2300      	movs	r3, #0
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af6:	f10a 0a01 	add.w	sl, sl, #1
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	9307      	str	r3, [sp, #28]
 8004afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b02:	931a      	str	r3, [sp, #104]	; 0x68
 8004b04:	4654      	mov	r4, sl
 8004b06:	2205      	movs	r2, #5
 8004b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0c:	4851      	ldr	r0, [pc, #324]	; (8004c54 <_svfiprintf_r+0x1ec>)
 8004b0e:	f7fb fb5f 	bl	80001d0 <memchr>
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	b9d8      	cbnz	r0, 8004b4e <_svfiprintf_r+0xe6>
 8004b16:	06d0      	lsls	r0, r2, #27
 8004b18:	bf44      	itt	mi
 8004b1a:	2320      	movmi	r3, #32
 8004b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b20:	0711      	lsls	r1, r2, #28
 8004b22:	bf44      	itt	mi
 8004b24:	232b      	movmi	r3, #43	; 0x2b
 8004b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b30:	d015      	beq.n	8004b5e <_svfiprintf_r+0xf6>
 8004b32:	9a07      	ldr	r2, [sp, #28]
 8004b34:	4654      	mov	r4, sl
 8004b36:	2000      	movs	r0, #0
 8004b38:	f04f 0c0a 	mov.w	ip, #10
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b42:	3b30      	subs	r3, #48	; 0x30
 8004b44:	2b09      	cmp	r3, #9
 8004b46:	d94e      	bls.n	8004be6 <_svfiprintf_r+0x17e>
 8004b48:	b1b0      	cbz	r0, 8004b78 <_svfiprintf_r+0x110>
 8004b4a:	9207      	str	r2, [sp, #28]
 8004b4c:	e014      	b.n	8004b78 <_svfiprintf_r+0x110>
 8004b4e:	eba0 0308 	sub.w	r3, r0, r8
 8004b52:	fa09 f303 	lsl.w	r3, r9, r3
 8004b56:	4313      	orrs	r3, r2
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	46a2      	mov	sl, r4
 8004b5c:	e7d2      	b.n	8004b04 <_svfiprintf_r+0x9c>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	1d19      	adds	r1, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	9103      	str	r1, [sp, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfbb      	ittet	lt
 8004b6a:	425b      	neglt	r3, r3
 8004b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b70:	9307      	strge	r3, [sp, #28]
 8004b72:	9307      	strlt	r3, [sp, #28]
 8004b74:	bfb8      	it	lt
 8004b76:	9204      	strlt	r2, [sp, #16]
 8004b78:	7823      	ldrb	r3, [r4, #0]
 8004b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b7c:	d10c      	bne.n	8004b98 <_svfiprintf_r+0x130>
 8004b7e:	7863      	ldrb	r3, [r4, #1]
 8004b80:	2b2a      	cmp	r3, #42	; 0x2a
 8004b82:	d135      	bne.n	8004bf0 <_svfiprintf_r+0x188>
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	1d1a      	adds	r2, r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	9203      	str	r2, [sp, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfb8      	it	lt
 8004b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b94:	3402      	adds	r4, #2
 8004b96:	9305      	str	r3, [sp, #20]
 8004b98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c64 <_svfiprintf_r+0x1fc>
 8004b9c:	7821      	ldrb	r1, [r4, #0]
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	4650      	mov	r0, sl
 8004ba2:	f7fb fb15 	bl	80001d0 <memchr>
 8004ba6:	b140      	cbz	r0, 8004bba <_svfiprintf_r+0x152>
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	eba0 000a 	sub.w	r0, r0, sl
 8004bae:	fa03 f000 	lsl.w	r0, r3, r0
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	4303      	orrs	r3, r0
 8004bb6:	3401      	adds	r4, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbe:	4826      	ldr	r0, [pc, #152]	; (8004c58 <_svfiprintf_r+0x1f0>)
 8004bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc4:	2206      	movs	r2, #6
 8004bc6:	f7fb fb03 	bl	80001d0 <memchr>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d038      	beq.n	8004c40 <_svfiprintf_r+0x1d8>
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <_svfiprintf_r+0x1f4>)
 8004bd0:	bb1b      	cbnz	r3, 8004c1a <_svfiprintf_r+0x1b2>
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	3308      	adds	r3, #8
 8004bdc:	9303      	str	r3, [sp, #12]
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	4433      	add	r3, r6
 8004be2:	9309      	str	r3, [sp, #36]	; 0x24
 8004be4:	e767      	b.n	8004ab6 <_svfiprintf_r+0x4e>
 8004be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bea:	460c      	mov	r4, r1
 8004bec:	2001      	movs	r0, #1
 8004bee:	e7a5      	b.n	8004b3c <_svfiprintf_r+0xd4>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	3401      	adds	r4, #1
 8004bf4:	9305      	str	r3, [sp, #20]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c02:	3a30      	subs	r2, #48	; 0x30
 8004c04:	2a09      	cmp	r2, #9
 8004c06:	d903      	bls.n	8004c10 <_svfiprintf_r+0x1a8>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0c5      	beq.n	8004b98 <_svfiprintf_r+0x130>
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	e7c3      	b.n	8004b98 <_svfiprintf_r+0x130>
 8004c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c14:	4604      	mov	r4, r0
 8004c16:	2301      	movs	r3, #1
 8004c18:	e7f0      	b.n	8004bfc <_svfiprintf_r+0x194>
 8004c1a:	ab03      	add	r3, sp, #12
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <_svfiprintf_r+0x1f8>)
 8004c22:	a904      	add	r1, sp, #16
 8004c24:	4638      	mov	r0, r7
 8004c26:	f3af 8000 	nop.w
 8004c2a:	1c42      	adds	r2, r0, #1
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	d1d6      	bne.n	8004bde <_svfiprintf_r+0x176>
 8004c30:	89ab      	ldrh	r3, [r5, #12]
 8004c32:	065b      	lsls	r3, r3, #25
 8004c34:	f53f af2c 	bmi.w	8004a90 <_svfiprintf_r+0x28>
 8004c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c3a:	b01d      	add	sp, #116	; 0x74
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	ab03      	add	r3, sp, #12
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	462a      	mov	r2, r5
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <_svfiprintf_r+0x1f8>)
 8004c48:	a904      	add	r1, sp, #16
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f000 f87a 	bl	8004d44 <_printf_i>
 8004c50:	e7eb      	b.n	8004c2a <_svfiprintf_r+0x1c2>
 8004c52:	bf00      	nop
 8004c54:	080052b4 	.word	0x080052b4
 8004c58:	080052be 	.word	0x080052be
 8004c5c:	00000000 	.word	0x00000000
 8004c60:	080049b1 	.word	0x080049b1
 8004c64:	080052ba 	.word	0x080052ba

08004c68 <_printf_common>:
 8004c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	4699      	mov	r9, r3
 8004c70:	688a      	ldr	r2, [r1, #8]
 8004c72:	690b      	ldr	r3, [r1, #16]
 8004c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	bfb8      	it	lt
 8004c7c:	4613      	movlt	r3, r2
 8004c7e:	6033      	str	r3, [r6, #0]
 8004c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c84:	4607      	mov	r7, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	b10a      	cbz	r2, 8004c8e <_printf_common+0x26>
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	0699      	lsls	r1, r3, #26
 8004c92:	bf42      	ittt	mi
 8004c94:	6833      	ldrmi	r3, [r6, #0]
 8004c96:	3302      	addmi	r3, #2
 8004c98:	6033      	strmi	r3, [r6, #0]
 8004c9a:	6825      	ldr	r5, [r4, #0]
 8004c9c:	f015 0506 	ands.w	r5, r5, #6
 8004ca0:	d106      	bne.n	8004cb0 <_printf_common+0x48>
 8004ca2:	f104 0a19 	add.w	sl, r4, #25
 8004ca6:	68e3      	ldr	r3, [r4, #12]
 8004ca8:	6832      	ldr	r2, [r6, #0]
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	dc26      	bgt.n	8004cfe <_printf_common+0x96>
 8004cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cb4:	1e13      	subs	r3, r2, #0
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	bf18      	it	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	0692      	lsls	r2, r2, #26
 8004cbe:	d42b      	bmi.n	8004d18 <_printf_common+0xb0>
 8004cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d01e      	beq.n	8004d0c <_printf_common+0xa4>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	68e5      	ldr	r5, [r4, #12]
 8004cd2:	6832      	ldr	r2, [r6, #0]
 8004cd4:	f003 0306 	and.w	r3, r3, #6
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	bf08      	it	eq
 8004cdc:	1aad      	subeq	r5, r5, r2
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	6922      	ldr	r2, [r4, #16]
 8004ce2:	bf0c      	ite	eq
 8004ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce8:	2500      	movne	r5, #0
 8004cea:	4293      	cmp	r3, r2
 8004cec:	bfc4      	itt	gt
 8004cee:	1a9b      	subgt	r3, r3, r2
 8004cf0:	18ed      	addgt	r5, r5, r3
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	341a      	adds	r4, #26
 8004cf6:	42b5      	cmp	r5, r6
 8004cf8:	d11a      	bne.n	8004d30 <_printf_common+0xc8>
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	e008      	b.n	8004d10 <_printf_common+0xa8>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4652      	mov	r2, sl
 8004d02:	4649      	mov	r1, r9
 8004d04:	4638      	mov	r0, r7
 8004d06:	47c0      	blx	r8
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d103      	bne.n	8004d14 <_printf_common+0xac>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7c6      	b.n	8004ca6 <_printf_common+0x3e>
 8004d18:	18e1      	adds	r1, r4, r3
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	2030      	movs	r0, #48	; 0x30
 8004d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d22:	4422      	add	r2, r4
 8004d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	e7c7      	b.n	8004cc0 <_printf_common+0x58>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4622      	mov	r2, r4
 8004d34:	4649      	mov	r1, r9
 8004d36:	4638      	mov	r0, r7
 8004d38:	47c0      	blx	r8
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d0e6      	beq.n	8004d0c <_printf_common+0xa4>
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7d9      	b.n	8004cf6 <_printf_common+0x8e>
	...

08004d44 <_printf_i>:
 8004d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	7e0f      	ldrb	r7, [r1, #24]
 8004d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d4c:	2f78      	cmp	r7, #120	; 0x78
 8004d4e:	4691      	mov	r9, r2
 8004d50:	4680      	mov	r8, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	469a      	mov	sl, r3
 8004d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d5a:	d807      	bhi.n	8004d6c <_printf_i+0x28>
 8004d5c:	2f62      	cmp	r7, #98	; 0x62
 8004d5e:	d80a      	bhi.n	8004d76 <_printf_i+0x32>
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f000 80d8 	beq.w	8004f16 <_printf_i+0x1d2>
 8004d66:	2f58      	cmp	r7, #88	; 0x58
 8004d68:	f000 80a3 	beq.w	8004eb2 <_printf_i+0x16e>
 8004d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d74:	e03a      	b.n	8004dec <_printf_i+0xa8>
 8004d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d7a:	2b15      	cmp	r3, #21
 8004d7c:	d8f6      	bhi.n	8004d6c <_printf_i+0x28>
 8004d7e:	a101      	add	r1, pc, #4	; (adr r1, 8004d84 <_printf_i+0x40>)
 8004d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d84:	08004ddd 	.word	0x08004ddd
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004d6d 	.word	0x08004d6d
 8004d90:	08004d6d 	.word	0x08004d6d
 8004d94:	08004d6d 	.word	0x08004d6d
 8004d98:	08004d6d 	.word	0x08004d6d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d6d 	.word	0x08004d6d
 8004da4:	08004d6d 	.word	0x08004d6d
 8004da8:	08004d6d 	.word	0x08004d6d
 8004dac:	08004d6d 	.word	0x08004d6d
 8004db0:	08004efd 	.word	0x08004efd
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004edf 	.word	0x08004edf
 8004dbc:	08004d6d 	.word	0x08004d6d
 8004dc0:	08004d6d 	.word	0x08004d6d
 8004dc4:	08004f1f 	.word	0x08004f1f
 8004dc8:	08004d6d 	.word	0x08004d6d
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004d6d 	.word	0x08004d6d
 8004dd4:	08004d6d 	.word	0x08004d6d
 8004dd8:	08004ee7 	.word	0x08004ee7
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	602a      	str	r2, [r5, #0]
 8004de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0a3      	b.n	8004f38 <_printf_i+0x1f4>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	6829      	ldr	r1, [r5, #0]
 8004df4:	0606      	lsls	r6, r0, #24
 8004df6:	f101 0304 	add.w	r3, r1, #4
 8004dfa:	d50a      	bpl.n	8004e12 <_printf_i+0xce>
 8004dfc:	680e      	ldr	r6, [r1, #0]
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	da03      	bge.n	8004e0c <_printf_i+0xc8>
 8004e04:	232d      	movs	r3, #45	; 0x2d
 8004e06:	4276      	negs	r6, r6
 8004e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0c:	485e      	ldr	r0, [pc, #376]	; (8004f88 <_printf_i+0x244>)
 8004e0e:	230a      	movs	r3, #10
 8004e10:	e019      	b.n	8004e46 <_printf_i+0x102>
 8004e12:	680e      	ldr	r6, [r1, #0]
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e1a:	bf18      	it	ne
 8004e1c:	b236      	sxthne	r6, r6
 8004e1e:	e7ef      	b.n	8004e00 <_printf_i+0xbc>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	6029      	str	r1, [r5, #0]
 8004e28:	0601      	lsls	r1, r0, #24
 8004e2a:	d501      	bpl.n	8004e30 <_printf_i+0xec>
 8004e2c:	681e      	ldr	r6, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <_printf_i+0xf2>
 8004e30:	0646      	lsls	r6, r0, #25
 8004e32:	d5fb      	bpl.n	8004e2c <_printf_i+0xe8>
 8004e34:	881e      	ldrh	r6, [r3, #0]
 8004e36:	4854      	ldr	r0, [pc, #336]	; (8004f88 <_printf_i+0x244>)
 8004e38:	2f6f      	cmp	r7, #111	; 0x6f
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2308      	moveq	r3, #8
 8004e3e:	230a      	movne	r3, #10
 8004e40:	2100      	movs	r1, #0
 8004e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e46:	6865      	ldr	r5, [r4, #4]
 8004e48:	60a5      	str	r5, [r4, #8]
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	bfa2      	ittt	ge
 8004e4e:	6821      	ldrge	r1, [r4, #0]
 8004e50:	f021 0104 	bicge.w	r1, r1, #4
 8004e54:	6021      	strge	r1, [r4, #0]
 8004e56:	b90e      	cbnz	r6, 8004e5c <_printf_i+0x118>
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	d04d      	beq.n	8004ef8 <_printf_i+0x1b4>
 8004e5c:	4615      	mov	r5, r2
 8004e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e62:	fb03 6711 	mls	r7, r3, r1, r6
 8004e66:	5dc7      	ldrb	r7, [r0, r7]
 8004e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e6c:	4637      	mov	r7, r6
 8004e6e:	42bb      	cmp	r3, r7
 8004e70:	460e      	mov	r6, r1
 8004e72:	d9f4      	bls.n	8004e5e <_printf_i+0x11a>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d10b      	bne.n	8004e90 <_printf_i+0x14c>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07de      	lsls	r6, r3, #31
 8004e7c:	d508      	bpl.n	8004e90 <_printf_i+0x14c>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	6861      	ldr	r1, [r4, #4]
 8004e82:	4299      	cmp	r1, r3
 8004e84:	bfde      	ittt	le
 8004e86:	2330      	movle	r3, #48	; 0x30
 8004e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e90:	1b52      	subs	r2, r2, r5
 8004e92:	6122      	str	r2, [r4, #16]
 8004e94:	f8cd a000 	str.w	sl, [sp]
 8004e98:	464b      	mov	r3, r9
 8004e9a:	aa03      	add	r2, sp, #12
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f7ff fee2 	bl	8004c68 <_printf_common>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d14c      	bne.n	8004f42 <_printf_i+0x1fe>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b004      	add	sp, #16
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	4835      	ldr	r0, [pc, #212]	; (8004f88 <_printf_i+0x244>)
 8004eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ec0:	6029      	str	r1, [r5, #0]
 8004ec2:	061d      	lsls	r5, r3, #24
 8004ec4:	d514      	bpl.n	8004ef0 <_printf_i+0x1ac>
 8004ec6:	07df      	lsls	r7, r3, #31
 8004ec8:	bf44      	itt	mi
 8004eca:	f043 0320 	orrmi.w	r3, r3, #32
 8004ece:	6023      	strmi	r3, [r4, #0]
 8004ed0:	b91e      	cbnz	r6, 8004eda <_printf_i+0x196>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f023 0320 	bic.w	r3, r3, #32
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	2310      	movs	r3, #16
 8004edc:	e7b0      	b.n	8004e40 <_printf_i+0xfc>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	f043 0320 	orr.w	r3, r3, #32
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	2378      	movs	r3, #120	; 0x78
 8004ee8:	4828      	ldr	r0, [pc, #160]	; (8004f8c <_printf_i+0x248>)
 8004eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eee:	e7e3      	b.n	8004eb8 <_printf_i+0x174>
 8004ef0:	0659      	lsls	r1, r3, #25
 8004ef2:	bf48      	it	mi
 8004ef4:	b2b6      	uxthmi	r6, r6
 8004ef6:	e7e6      	b.n	8004ec6 <_printf_i+0x182>
 8004ef8:	4615      	mov	r5, r2
 8004efa:	e7bb      	b.n	8004e74 <_printf_i+0x130>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	6826      	ldr	r6, [r4, #0]
 8004f00:	6961      	ldr	r1, [r4, #20]
 8004f02:	1d18      	adds	r0, r3, #4
 8004f04:	6028      	str	r0, [r5, #0]
 8004f06:	0635      	lsls	r5, r6, #24
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	d501      	bpl.n	8004f10 <_printf_i+0x1cc>
 8004f0c:	6019      	str	r1, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <_printf_i+0x1d2>
 8004f10:	0670      	lsls	r0, r6, #25
 8004f12:	d5fb      	bpl.n	8004f0c <_printf_i+0x1c8>
 8004f14:	8019      	strh	r1, [r3, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	6123      	str	r3, [r4, #16]
 8004f1a:	4615      	mov	r5, r2
 8004f1c:	e7ba      	b.n	8004e94 <_printf_i+0x150>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	1d1a      	adds	r2, r3, #4
 8004f22:	602a      	str	r2, [r5, #0]
 8004f24:	681d      	ldr	r5, [r3, #0]
 8004f26:	6862      	ldr	r2, [r4, #4]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f7fb f950 	bl	80001d0 <memchr>
 8004f30:	b108      	cbz	r0, 8004f36 <_printf_i+0x1f2>
 8004f32:	1b40      	subs	r0, r0, r5
 8004f34:	6060      	str	r0, [r4, #4]
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f40:	e7a8      	b.n	8004e94 <_printf_i+0x150>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	462a      	mov	r2, r5
 8004f46:	4649      	mov	r1, r9
 8004f48:	4640      	mov	r0, r8
 8004f4a:	47d0      	blx	sl
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d0ab      	beq.n	8004ea8 <_printf_i+0x164>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	079b      	lsls	r3, r3, #30
 8004f54:	d413      	bmi.n	8004f7e <_printf_i+0x23a>
 8004f56:	68e0      	ldr	r0, [r4, #12]
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	bfb8      	it	lt
 8004f5e:	4618      	movlt	r0, r3
 8004f60:	e7a4      	b.n	8004eac <_printf_i+0x168>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4632      	mov	r2, r6
 8004f66:	4649      	mov	r1, r9
 8004f68:	4640      	mov	r0, r8
 8004f6a:	47d0      	blx	sl
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d09b      	beq.n	8004ea8 <_printf_i+0x164>
 8004f70:	3501      	adds	r5, #1
 8004f72:	68e3      	ldr	r3, [r4, #12]
 8004f74:	9903      	ldr	r1, [sp, #12]
 8004f76:	1a5b      	subs	r3, r3, r1
 8004f78:	42ab      	cmp	r3, r5
 8004f7a:	dcf2      	bgt.n	8004f62 <_printf_i+0x21e>
 8004f7c:	e7eb      	b.n	8004f56 <_printf_i+0x212>
 8004f7e:	2500      	movs	r5, #0
 8004f80:	f104 0619 	add.w	r6, r4, #25
 8004f84:	e7f5      	b.n	8004f72 <_printf_i+0x22e>
 8004f86:	bf00      	nop
 8004f88:	080052c5 	.word	0x080052c5
 8004f8c:	080052d6 	.word	0x080052d6

08004f90 <memcpy>:
 8004f90:	440a      	add	r2, r1
 8004f92:	4291      	cmp	r1, r2
 8004f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f98:	d100      	bne.n	8004f9c <memcpy+0xc>
 8004f9a:	4770      	bx	lr
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	d1f9      	bne.n	8004f9e <memcpy+0xe>
 8004faa:	bd10      	pop	{r4, pc}

08004fac <memmove>:
 8004fac:	4288      	cmp	r0, r1
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	eb01 0402 	add.w	r4, r1, r2
 8004fb4:	d902      	bls.n	8004fbc <memmove+0x10>
 8004fb6:	4284      	cmp	r4, r0
 8004fb8:	4623      	mov	r3, r4
 8004fba:	d807      	bhi.n	8004fcc <memmove+0x20>
 8004fbc:	1e43      	subs	r3, r0, #1
 8004fbe:	42a1      	cmp	r1, r4
 8004fc0:	d008      	beq.n	8004fd4 <memmove+0x28>
 8004fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fca:	e7f8      	b.n	8004fbe <memmove+0x12>
 8004fcc:	4402      	add	r2, r0
 8004fce:	4601      	mov	r1, r0
 8004fd0:	428a      	cmp	r2, r1
 8004fd2:	d100      	bne.n	8004fd6 <memmove+0x2a>
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fde:	e7f7      	b.n	8004fd0 <memmove+0x24>

08004fe0 <_free_r>:
 8004fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d044      	beq.n	8005070 <_free_r+0x90>
 8004fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fea:	9001      	str	r0, [sp, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f1a1 0404 	sub.w	r4, r1, #4
 8004ff2:	bfb8      	it	lt
 8004ff4:	18e4      	addlt	r4, r4, r3
 8004ff6:	f000 f913 	bl	8005220 <__malloc_lock>
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <_free_r+0x94>)
 8004ffc:	9801      	ldr	r0, [sp, #4]
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	b933      	cbnz	r3, 8005010 <_free_r+0x30>
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	6014      	str	r4, [r2, #0]
 8005006:	b003      	add	sp, #12
 8005008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800500c:	f000 b90e 	b.w	800522c <__malloc_unlock>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d908      	bls.n	8005026 <_free_r+0x46>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf01      	itttt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	1949      	addeq	r1, r1, r5
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	e7ed      	b.n	8005002 <_free_r+0x22>
 8005026:	461a      	mov	r2, r3
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b10b      	cbz	r3, 8005030 <_free_r+0x50>
 800502c:	42a3      	cmp	r3, r4
 800502e:	d9fa      	bls.n	8005026 <_free_r+0x46>
 8005030:	6811      	ldr	r1, [r2, #0]
 8005032:	1855      	adds	r5, r2, r1
 8005034:	42a5      	cmp	r5, r4
 8005036:	d10b      	bne.n	8005050 <_free_r+0x70>
 8005038:	6824      	ldr	r4, [r4, #0]
 800503a:	4421      	add	r1, r4
 800503c:	1854      	adds	r4, r2, r1
 800503e:	42a3      	cmp	r3, r4
 8005040:	6011      	str	r1, [r2, #0]
 8005042:	d1e0      	bne.n	8005006 <_free_r+0x26>
 8005044:	681c      	ldr	r4, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6053      	str	r3, [r2, #4]
 800504a:	4421      	add	r1, r4
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	e7da      	b.n	8005006 <_free_r+0x26>
 8005050:	d902      	bls.n	8005058 <_free_r+0x78>
 8005052:	230c      	movs	r3, #12
 8005054:	6003      	str	r3, [r0, #0]
 8005056:	e7d6      	b.n	8005006 <_free_r+0x26>
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	1961      	adds	r1, r4, r5
 800505c:	428b      	cmp	r3, r1
 800505e:	bf04      	itt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	bf04      	itt	eq
 8005068:	1949      	addeq	r1, r1, r5
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	6054      	str	r4, [r2, #4]
 800506e:	e7ca      	b.n	8005006 <_free_r+0x26>
 8005070:	b003      	add	sp, #12
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	2000022c 	.word	0x2000022c

08005078 <sbrk_aligned>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0e      	ldr	r6, [pc, #56]	; (80050b4 <sbrk_aligned+0x3c>)
 800507c:	460c      	mov	r4, r1
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	b911      	cbnz	r1, 800508a <sbrk_aligned+0x12>
 8005084:	f000 f8bc 	bl	8005200 <_sbrk_r>
 8005088:	6030      	str	r0, [r6, #0]
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f8b7 	bl	8005200 <_sbrk_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d00a      	beq.n	80050ac <sbrk_aligned+0x34>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d007      	beq.n	80050b0 <sbrk_aligned+0x38>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f8ac 	bl	8005200 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d101      	bne.n	80050b0 <sbrk_aligned+0x38>
 80050ac:	f04f 34ff 	mov.w	r4, #4294967295
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	20000230 	.word	0x20000230

080050b8 <_malloc_r>:
 80050b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050bc:	1ccd      	adds	r5, r1, #3
 80050be:	f025 0503 	bic.w	r5, r5, #3
 80050c2:	3508      	adds	r5, #8
 80050c4:	2d0c      	cmp	r5, #12
 80050c6:	bf38      	it	cc
 80050c8:	250c      	movcc	r5, #12
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	4607      	mov	r7, r0
 80050ce:	db01      	blt.n	80050d4 <_malloc_r+0x1c>
 80050d0:	42a9      	cmp	r1, r5
 80050d2:	d905      	bls.n	80050e0 <_malloc_r+0x28>
 80050d4:	230c      	movs	r3, #12
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	2600      	movs	r6, #0
 80050da:	4630      	mov	r0, r6
 80050dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e0:	4e2e      	ldr	r6, [pc, #184]	; (800519c <_malloc_r+0xe4>)
 80050e2:	f000 f89d 	bl	8005220 <__malloc_lock>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	461c      	mov	r4, r3
 80050ea:	bb34      	cbnz	r4, 800513a <_malloc_r+0x82>
 80050ec:	4629      	mov	r1, r5
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ffc2 	bl	8005078 <sbrk_aligned>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	4604      	mov	r4, r0
 80050f8:	d14d      	bne.n	8005196 <_malloc_r+0xde>
 80050fa:	6834      	ldr	r4, [r6, #0]
 80050fc:	4626      	mov	r6, r4
 80050fe:	2e00      	cmp	r6, #0
 8005100:	d140      	bne.n	8005184 <_malloc_r+0xcc>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	4631      	mov	r1, r6
 8005106:	4638      	mov	r0, r7
 8005108:	eb04 0803 	add.w	r8, r4, r3
 800510c:	f000 f878 	bl	8005200 <_sbrk_r>
 8005110:	4580      	cmp	r8, r0
 8005112:	d13a      	bne.n	800518a <_malloc_r+0xd2>
 8005114:	6821      	ldr	r1, [r4, #0]
 8005116:	3503      	adds	r5, #3
 8005118:	1a6d      	subs	r5, r5, r1
 800511a:	f025 0503 	bic.w	r5, r5, #3
 800511e:	3508      	adds	r5, #8
 8005120:	2d0c      	cmp	r5, #12
 8005122:	bf38      	it	cc
 8005124:	250c      	movcc	r5, #12
 8005126:	4629      	mov	r1, r5
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ffa5 	bl	8005078 <sbrk_aligned>
 800512e:	3001      	adds	r0, #1
 8005130:	d02b      	beq.n	800518a <_malloc_r+0xd2>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	442b      	add	r3, r5
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	e00e      	b.n	8005158 <_malloc_r+0xa0>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	1b52      	subs	r2, r2, r5
 800513e:	d41e      	bmi.n	800517e <_malloc_r+0xc6>
 8005140:	2a0b      	cmp	r2, #11
 8005142:	d916      	bls.n	8005172 <_malloc_r+0xba>
 8005144:	1961      	adds	r1, r4, r5
 8005146:	42a3      	cmp	r3, r4
 8005148:	6025      	str	r5, [r4, #0]
 800514a:	bf18      	it	ne
 800514c:	6059      	strne	r1, [r3, #4]
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	bf08      	it	eq
 8005152:	6031      	streq	r1, [r6, #0]
 8005154:	5162      	str	r2, [r4, r5]
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	4638      	mov	r0, r7
 800515a:	f104 060b 	add.w	r6, r4, #11
 800515e:	f000 f865 	bl	800522c <__malloc_unlock>
 8005162:	f026 0607 	bic.w	r6, r6, #7
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	1af2      	subs	r2, r6, r3
 800516a:	d0b6      	beq.n	80050da <_malloc_r+0x22>
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	50a3      	str	r3, [r4, r2]
 8005170:	e7b3      	b.n	80050da <_malloc_r+0x22>
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	42a3      	cmp	r3, r4
 8005176:	bf0c      	ite	eq
 8005178:	6032      	streq	r2, [r6, #0]
 800517a:	605a      	strne	r2, [r3, #4]
 800517c:	e7ec      	b.n	8005158 <_malloc_r+0xa0>
 800517e:	4623      	mov	r3, r4
 8005180:	6864      	ldr	r4, [r4, #4]
 8005182:	e7b2      	b.n	80050ea <_malloc_r+0x32>
 8005184:	4634      	mov	r4, r6
 8005186:	6876      	ldr	r6, [r6, #4]
 8005188:	e7b9      	b.n	80050fe <_malloc_r+0x46>
 800518a:	230c      	movs	r3, #12
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4638      	mov	r0, r7
 8005190:	f000 f84c 	bl	800522c <__malloc_unlock>
 8005194:	e7a1      	b.n	80050da <_malloc_r+0x22>
 8005196:	6025      	str	r5, [r4, #0]
 8005198:	e7de      	b.n	8005158 <_malloc_r+0xa0>
 800519a:	bf00      	nop
 800519c:	2000022c 	.word	0x2000022c

080051a0 <_realloc_r>:
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	4680      	mov	r8, r0
 80051a6:	4614      	mov	r4, r2
 80051a8:	460e      	mov	r6, r1
 80051aa:	b921      	cbnz	r1, 80051b6 <_realloc_r+0x16>
 80051ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b0:	4611      	mov	r1, r2
 80051b2:	f7ff bf81 	b.w	80050b8 <_malloc_r>
 80051b6:	b92a      	cbnz	r2, 80051c4 <_realloc_r+0x24>
 80051b8:	f7ff ff12 	bl	8004fe0 <_free_r>
 80051bc:	4625      	mov	r5, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c4:	f000 f838 	bl	8005238 <_malloc_usable_size_r>
 80051c8:	4284      	cmp	r4, r0
 80051ca:	4607      	mov	r7, r0
 80051cc:	d802      	bhi.n	80051d4 <_realloc_r+0x34>
 80051ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051d2:	d812      	bhi.n	80051fa <_realloc_r+0x5a>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7ff ff6e 	bl	80050b8 <_malloc_r>
 80051dc:	4605      	mov	r5, r0
 80051de:	2800      	cmp	r0, #0
 80051e0:	d0ed      	beq.n	80051be <_realloc_r+0x1e>
 80051e2:	42bc      	cmp	r4, r7
 80051e4:	4622      	mov	r2, r4
 80051e6:	4631      	mov	r1, r6
 80051e8:	bf28      	it	cs
 80051ea:	463a      	movcs	r2, r7
 80051ec:	f7ff fed0 	bl	8004f90 <memcpy>
 80051f0:	4631      	mov	r1, r6
 80051f2:	4640      	mov	r0, r8
 80051f4:	f7ff fef4 	bl	8004fe0 <_free_r>
 80051f8:	e7e1      	b.n	80051be <_realloc_r+0x1e>
 80051fa:	4635      	mov	r5, r6
 80051fc:	e7df      	b.n	80051be <_realloc_r+0x1e>
	...

08005200 <_sbrk_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_sbrk_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fb fd82 	bl	8000d14 <_sbrk>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_sbrk_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_sbrk_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20000234 	.word	0x20000234

08005220 <__malloc_lock>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__malloc_lock+0x8>)
 8005222:	f000 b811 	b.w	8005248 <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	20000238 	.word	0x20000238

0800522c <__malloc_unlock>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__malloc_unlock+0x8>)
 800522e:	f000 b80c 	b.w	800524a <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	20000238 	.word	0x20000238

08005238 <_malloc_usable_size_r>:
 8005238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523c:	1f18      	subs	r0, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbc      	itt	lt
 8005242:	580b      	ldrlt	r3, [r1, r0]
 8005244:	18c0      	addlt	r0, r0, r3
 8005246:	4770      	bx	lr

08005248 <__retarget_lock_acquire_recursive>:
 8005248:	4770      	bx	lr

0800524a <__retarget_lock_release_recursive>:
 800524a:	4770      	bx	lr

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
